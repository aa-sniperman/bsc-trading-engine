/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface TokenManagerHelper3Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "PANCAKE_FACTORY"
      | "PANCAKE_V3_FACTORY"
      | "TM"
      | "TM2"
      | "TOKEN_MANAGER"
      | "TOKEN_MANAGER_2"
      | "WETH"
      | "calcInitialPrice"
      | "getTokenInfo"
      | "tryBuy"
      | "trySell"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "PANCAKE_FACTORY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PANCAKE_V3_FACTORY",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "TM", values?: undefined): string;
  encodeFunctionData(functionFragment: "TM2", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "TOKEN_MANAGER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOKEN_MANAGER_2",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "calcInitialPrice",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tryBuy",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "trySell",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "PANCAKE_FACTORY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PANCAKE_V3_FACTORY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "TM", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "TM2", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "TOKEN_MANAGER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOKEN_MANAGER_2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calcInitialPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tryBuy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "trySell", data: BytesLike): Result;
}

export interface TokenManagerHelper3 extends BaseContract {
  connect(runner?: ContractRunner | null): TokenManagerHelper3;
  waitForDeployment(): Promise<this>;

  interface: TokenManagerHelper3Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  PANCAKE_FACTORY: TypedContractMethod<[], [string], "view">;

  PANCAKE_V3_FACTORY: TypedContractMethod<[], [string], "view">;

  TM: TypedContractMethod<[], [string], "view">;

  TM2: TypedContractMethod<[], [string], "view">;

  TOKEN_MANAGER: TypedContractMethod<[], [string], "view">;

  TOKEN_MANAGER_2: TypedContractMethod<[], [string], "view">;

  WETH: TypedContractMethod<[], [string], "view">;

  calcInitialPrice: TypedContractMethod<
    [
      maxRaising: BigNumberish,
      totalSupply: BigNumberish,
      offers: BigNumberish,
      reserves: BigNumberish
    ],
    [bigint],
    "view"
  >;

  getTokenInfo: TypedContractMethod<
    [token: AddressLike],
    [
      [
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean
      ] & {
        version: bigint;
        tokenManager: string;
        quote: string;
        lastPrice: bigint;
        tradingFeeRate: bigint;
        minTradingFee: bigint;
        launchTime: bigint;
        offers: bigint;
        maxOffers: bigint;
        funds: bigint;
        maxFunds: bigint;
        liquidityAdded: boolean;
      }
    ],
    "view"
  >;

  tryBuy: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish, funds: BigNumberish],
    [
      [string, string, bigint, bigint, bigint, bigint, bigint, bigint] & {
        tokenManager: string;
        quote: string;
        estimatedAmount: bigint;
        estimatedCost: bigint;
        estimatedFee: bigint;
        amountMsgValue: bigint;
        amountApproval: bigint;
        amountFunds: bigint;
      }
    ],
    "view"
  >;

  trySell: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [
      [string, string, bigint, bigint] & {
        tokenManager: string;
        quote: string;
        funds: bigint;
        fee: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "PANCAKE_FACTORY"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PANCAKE_V3_FACTORY"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "TM"): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "TM2"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "TOKEN_MANAGER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "TOKEN_MANAGER_2"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "WETH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "calcInitialPrice"
  ): TypedContractMethod<
    [
      maxRaising: BigNumberish,
      totalSupply: BigNumberish,
      offers: BigNumberish,
      reserves: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTokenInfo"
  ): TypedContractMethod<
    [token: AddressLike],
    [
      [
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean
      ] & {
        version: bigint;
        tokenManager: string;
        quote: string;
        lastPrice: bigint;
        tradingFeeRate: bigint;
        minTradingFee: bigint;
        launchTime: bigint;
        offers: bigint;
        maxOffers: bigint;
        funds: bigint;
        maxFunds: bigint;
        liquidityAdded: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "tryBuy"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish, funds: BigNumberish],
    [
      [string, string, bigint, bigint, bigint, bigint, bigint, bigint] & {
        tokenManager: string;
        quote: string;
        estimatedAmount: bigint;
        estimatedCost: bigint;
        estimatedFee: bigint;
        amountMsgValue: bigint;
        amountApproval: bigint;
        amountFunds: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "trySell"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [
      [string, string, bigint, bigint] & {
        tokenManager: string;
        quote: string;
        funds: bigint;
        fee: bigint;
      }
    ],
    "view"
  >;

  filters: {};
}
