/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface TokenManager2Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "buyToken(address,address,uint256,uint256)"
      | "buyToken(address,uint256,uint256)"
      | "buyTokenAMAP(address,address,uint256,uint256)"
      | "buyTokenAMAP(address,uint256,uint256)"
      | "sellToken"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "LiquidityAdded"
      | "TokenCreate"
      | "TokenPurchase"
      | "TokenSale"
      | "TradeStop"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "buyToken(address,address,uint256,uint256)",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyToken(address,uint256,uint256)",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyTokenAMAP(address,address,uint256,uint256)",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyTokenAMAP(address,uint256,uint256)",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sellToken",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "buyToken(address,address,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyToken(address,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyTokenAMAP(address,address,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyTokenAMAP(address,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sellToken", data: BytesLike): Result;
}

export namespace LiquidityAddedEvent {
  export type InputTuple = [
    base: AddressLike,
    offers: BigNumberish,
    quote: AddressLike,
    funds: BigNumberish
  ];
  export type OutputTuple = [
    base: string,
    offers: bigint,
    quote: string,
    funds: bigint
  ];
  export interface OutputObject {
    base: string;
    offers: bigint;
    quote: string;
    funds: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenCreateEvent {
  export type InputTuple = [
    creator: AddressLike,
    token: AddressLike,
    requestId: BigNumberish,
    name: string,
    symbol: string,
    totalSupply: BigNumberish,
    launchTime: BigNumberish,
    launchFee: BigNumberish
  ];
  export type OutputTuple = [
    creator: string,
    token: string,
    requestId: bigint,
    name: string,
    symbol: string,
    totalSupply: bigint,
    launchTime: bigint,
    launchFee: bigint
  ];
  export interface OutputObject {
    creator: string;
    token: string;
    requestId: bigint;
    name: string;
    symbol: string;
    totalSupply: bigint;
    launchTime: bigint;
    launchFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenPurchaseEvent {
  export type InputTuple = [
    token: AddressLike,
    account: AddressLike,
    price: BigNumberish,
    amount: BigNumberish,
    cost: BigNumberish,
    fee: BigNumberish,
    offers: BigNumberish,
    funds: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    account: string,
    price: bigint,
    amount: bigint,
    cost: bigint,
    fee: bigint,
    offers: bigint,
    funds: bigint
  ];
  export interface OutputObject {
    token: string;
    account: string;
    price: bigint;
    amount: bigint;
    cost: bigint;
    fee: bigint;
    offers: bigint;
    funds: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenSaleEvent {
  export type InputTuple = [
    token: AddressLike,
    account: AddressLike,
    price: BigNumberish,
    amount: BigNumberish,
    cost: BigNumberish,
    fee: BigNumberish,
    offers: BigNumberish,
    funds: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    account: string,
    price: bigint,
    amount: bigint,
    cost: bigint,
    fee: bigint,
    offers: bigint,
    funds: bigint
  ];
  export interface OutputObject {
    token: string;
    account: string;
    price: bigint;
    amount: bigint;
    cost: bigint;
    fee: bigint;
    offers: bigint;
    funds: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TradeStopEvent {
  export type InputTuple = [token: AddressLike];
  export type OutputTuple = [token: string];
  export interface OutputObject {
    token: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TokenManager2 extends BaseContract {
  connect(runner?: ContractRunner | null): TokenManager2;
  waitForDeployment(): Promise<this>;

  interface: TokenManager2Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  "buyToken(address,address,uint256,uint256)": TypedContractMethod<
    [
      token: AddressLike,
      to: AddressLike,
      amount: BigNumberish,
      maxFunds: BigNumberish
    ],
    [void],
    "payable"
  >;

  "buyToken(address,uint256,uint256)": TypedContractMethod<
    [token: AddressLike, amount: BigNumberish, maxFunds: BigNumberish],
    [void],
    "payable"
  >;

  "buyTokenAMAP(address,address,uint256,uint256)": TypedContractMethod<
    [
      token: AddressLike,
      to: AddressLike,
      funds: BigNumberish,
      minAmount: BigNumberish
    ],
    [void],
    "payable"
  >;

  "buyTokenAMAP(address,uint256,uint256)": TypedContractMethod<
    [token: AddressLike, funds: BigNumberish, minAmount: BigNumberish],
    [void],
    "payable"
  >;

  sellToken: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "buyToken(address,address,uint256,uint256)"
  ): TypedContractMethod<
    [
      token: AddressLike,
      to: AddressLike,
      amount: BigNumberish,
      maxFunds: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "buyToken(address,uint256,uint256)"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish, maxFunds: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "buyTokenAMAP(address,address,uint256,uint256)"
  ): TypedContractMethod<
    [
      token: AddressLike,
      to: AddressLike,
      funds: BigNumberish,
      minAmount: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "buyTokenAMAP(address,uint256,uint256)"
  ): TypedContractMethod<
    [token: AddressLike, funds: BigNumberish, minAmount: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "sellToken"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "LiquidityAdded"
  ): TypedContractEvent<
    LiquidityAddedEvent.InputTuple,
    LiquidityAddedEvent.OutputTuple,
    LiquidityAddedEvent.OutputObject
  >;
  getEvent(
    key: "TokenCreate"
  ): TypedContractEvent<
    TokenCreateEvent.InputTuple,
    TokenCreateEvent.OutputTuple,
    TokenCreateEvent.OutputObject
  >;
  getEvent(
    key: "TokenPurchase"
  ): TypedContractEvent<
    TokenPurchaseEvent.InputTuple,
    TokenPurchaseEvent.OutputTuple,
    TokenPurchaseEvent.OutputObject
  >;
  getEvent(
    key: "TokenSale"
  ): TypedContractEvent<
    TokenSaleEvent.InputTuple,
    TokenSaleEvent.OutputTuple,
    TokenSaleEvent.OutputObject
  >;
  getEvent(
    key: "TradeStop"
  ): TypedContractEvent<
    TradeStopEvent.InputTuple,
    TradeStopEvent.OutputTuple,
    TradeStopEvent.OutputObject
  >;

  filters: {
    "LiquidityAdded(address,uint256,address,uint256)": TypedContractEvent<
      LiquidityAddedEvent.InputTuple,
      LiquidityAddedEvent.OutputTuple,
      LiquidityAddedEvent.OutputObject
    >;
    LiquidityAdded: TypedContractEvent<
      LiquidityAddedEvent.InputTuple,
      LiquidityAddedEvent.OutputTuple,
      LiquidityAddedEvent.OutputObject
    >;

    "TokenCreate(address,address,uint256,string,string,uint256,uint256,uint256)": TypedContractEvent<
      TokenCreateEvent.InputTuple,
      TokenCreateEvent.OutputTuple,
      TokenCreateEvent.OutputObject
    >;
    TokenCreate: TypedContractEvent<
      TokenCreateEvent.InputTuple,
      TokenCreateEvent.OutputTuple,
      TokenCreateEvent.OutputObject
    >;

    "TokenPurchase(address,address,uint256,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      TokenPurchaseEvent.InputTuple,
      TokenPurchaseEvent.OutputTuple,
      TokenPurchaseEvent.OutputObject
    >;
    TokenPurchase: TypedContractEvent<
      TokenPurchaseEvent.InputTuple,
      TokenPurchaseEvent.OutputTuple,
      TokenPurchaseEvent.OutputObject
    >;

    "TokenSale(address,address,uint256,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      TokenSaleEvent.InputTuple,
      TokenSaleEvent.OutputTuple,
      TokenSaleEvent.OutputObject
    >;
    TokenSale: TypedContractEvent<
      TokenSaleEvent.InputTuple,
      TokenSaleEvent.OutputTuple,
      TokenSaleEvent.OutputObject
    >;

    "TradeStop(address)": TypedContractEvent<
      TradeStopEvent.InputTuple,
      TradeStopEvent.OutputTuple,
      TradeStopEvent.OutputObject
    >;
    TradeStop: TypedContractEvent<
      TradeStopEvent.InputTuple,
      TradeStopEvent.OutputTuple,
      TradeStopEvent.OutputObject
    >;
  };
}
